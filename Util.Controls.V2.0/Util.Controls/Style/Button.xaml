<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Util.Controls">


    <Style TargetType="{x:Type RepeatButton}" x:Key="DefaultRepeatButtonStyle">
        <Setter Property="Background" Value="{StaticResource ButtonBackground}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}" />
        <Setter Property="local:UtilProperty.MouseOverBackground" Value="{StaticResource ButtonMouseOverBackground}" />
        <Setter Property="local:UtilProperty.MouseOverForeground" Value="{StaticResource ButtonMouseOverForeground}" />
        <Setter Property="local:UtilProperty.PressedBackground" Value="{StaticResource ButtonPressedBackground}" />
        <Setter Property="local:UtilProperty.PressedForeground" Value="{StaticResource ButtonPressedForeground}" />
        <Setter Property="local:UtilProperty.FIconAnimationEnable" Value="False"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="local:UtilProperty.CornerRadius" Value="1" />
        <Setter Property="local:UtilProperty.FIconSize" Value="18" />
        <Setter Property="local:UtilProperty.FIcon" Value="" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="local:UtilProperty.FIconMargin" Value="0,0,3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" 
                                    CornerRadius="{TemplateBinding local:UtilProperty.CornerRadius}" Width="{TemplateBinding  Width}"
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <!--Icon/Text-->
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <TextBlock x:Name="FIcon" Margin="{TemplateBinding local:UtilProperty.FIconMargin}" Style="{StaticResource FIcon}" 
                                       Text="{TemplateBinding local:UtilProperty.FIcon}" FontSize="{TemplateBinding local:UtilProperty.FIconSize}" 
                                       Foreground="{TemplateBinding Foreground}"/>

                            <TextBlock VerticalAlignment="Center" TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"/>
                        </StackPanel>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Path=(local:UtilProperty.MouseOverBackground),RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Foreground" Value="{Binding Path=(local:UtilProperty.MouseOverForeground),RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <!--鼠标按下时的前景、背景样式-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Path=(local:UtilProperty.PressedBackground),RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Foreground" Value="{Binding Path=(local:UtilProperty.PressedForeground),RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="local:UtilProperty.FIconAnimationEnable" Value="True">
                            <Setter Property="local:UtilProperty.AllowsAnimation" Value="{Binding IsMouseOver,RelativeSource={RelativeSource TemplatedParent}}" TargetName="FIcon"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="DefaultButtonStyle">
        <Setter Property="Background" Value="{StaticResource ButtonBackground}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}" />
        <Setter Property="local:UtilProperty.MouseOverBackground" Value="{StaticResource ButtonMouseOverBackground}" />
        <Setter Property="local:UtilProperty.MouseOverForeground" Value="{StaticResource ButtonMouseOverForeground}" />
        <Setter Property="local:UtilProperty.PressedBackground" Value="{StaticResource ButtonPressedBackground}" />
        <Setter Property="local:UtilProperty.PressedForeground" Value="{StaticResource ButtonPressedForeground}" />
        <Setter Property="local:UtilProperty.FIconAnimationEnable" Value="False"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="local:UtilProperty.CornerRadius" Value="1" />
        <Setter Property="local:UtilProperty.FIconSize" Value="18" />
        <Setter Property="local:UtilProperty.FIcon" Value="" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="local:UtilProperty.FIconMargin" Value="0,0,3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" 
                                    CornerRadius="{TemplateBinding local:UtilProperty.CornerRadius}" Width="{TemplateBinding  Width}"
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <!--Icon/Text-->
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <TextBlock x:Name="FIcon" Margin="{TemplateBinding local:UtilProperty.FIconMargin}" Style="{StaticResource FIcon}" 
                                       Text="{TemplateBinding local:UtilProperty.FIcon}" FontSize="{TemplateBinding local:UtilProperty.FIconSize}" 
                                       Foreground="{TemplateBinding Foreground}"/>

                            <TextBlock VerticalAlignment="Center" TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"/>
                        </StackPanel>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding Path=(local:UtilProperty.MouseOverBackground),RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Foreground" Value="{Binding Path=(local:UtilProperty.MouseOverForeground),RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <!--鼠标按下时的前景、背景样式-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Path=(local:UtilProperty.PressedBackground),RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Foreground" Value="{Binding Path=(local:UtilProperty.PressedForeground),RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="local:UtilProperty.FIconAnimationEnable" Value="True">
                            <Setter Property="local:UtilProperty.AllowsAnimation" Value="{Binding IsMouseOver,RelativeSource={RelativeSource TemplatedParent}}" TargetName="FIcon"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparencyButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="local:UtilProperty.MouseOverBackground" Value="Transparent" />
        <Setter Property="local:UtilProperty.PressedBackground" Value="Transparent" />
        <Setter Property="local:UtilProperty.MouseOverForeground" Value="{StaticResource MouseOverForeground}" />
        <Setter Property="local:UtilProperty.PressedForeground" Value="{StaticResource PressedForeground}" />
        <Setter Property="Foreground" Value="{StaticResource ControlForeground}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Margin" Value="1"/>
        <Setter Property="local:UtilProperty.FIconSize" Value="18" />
        <Setter Property="local:UtilProperty.FIconMargin" Value="0,0,2,0" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <Style x:Key="LinkButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource LinkForeground}" />
        <Setter Property="local:UtilProperty.MouseOverForeground" Value="{StaticResource MouseOverForeground}" />
        <Setter Property="local:UtilProperty.PressedForeground" Value="{StaticResource PressedForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="local:UtilProperty.FIconSize" Value="17" />
        <Setter Property="local:UtilProperty.FIconMargin" Value="0,0,2,0" />
        <Setter Property="local:UtilProperty.FIcon" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <!--Icon/Text-->
                    <StackPanel x:Name="spanel" Orientation="Horizontal" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <TextBlock Margin="{TemplateBinding local:UtilProperty.FIconMargin}" Style="{StaticResource FIcon}" 
                                       Text="{TemplateBinding local:UtilProperty.FIcon}" FontSize="{TemplateBinding local:UtilProperty.FIconSize}" 
                                       Foreground="{TemplateBinding Foreground}" local:UtilProperty.AllowsAnimation="{TemplateBinding local:UtilProperty.AllowsAnimation}"/>

                        <TextBlock VerticalAlignment="Center" TextDecorations="Underline" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"/>
                    </StackPanel>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=(local:UtilProperty.MouseOverForeground),RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <!--鼠标按下时的前景、背景样式-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=(local:UtilProperty.PressedForeground),RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" TargetName="spanel"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>